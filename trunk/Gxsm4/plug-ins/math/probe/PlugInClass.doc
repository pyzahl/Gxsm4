%/* Gxsm - Gnome X Scanning Microscopy
% * universal STM/AFM/SARLS/SPALEED/... controlling and
% * data analysis software:  Documentation
% * 
% * Copyright (C) 1999,2000,2001 Percy Zahl
% *
% * Authors: Percy Zahl <zahl@users.sf.net>
% * additional features: Andreas Klust <klust@users.sf.net>
% * WWW Home: http://gxsm.sf.net
% *
% * This program is free software; you can redistribute it and/or modify
% * it under the terms of the GNU General Public License as published by
% * the Free Software Foundation; either version 2 of the License, or
% * (at your option) any later version.
% *
% * This program is distributed in the hope that it will be useful,
% * but WITHOUT ANY WARRANTY; without even the implied warranty of
% * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% * GNU General Public License for more details.
% *
% * You should have received a copy of the GNU General Public License
% * along with this program; if not, write to the Free Software
% * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
% */
% 
% file: PlugInClass.doc
% this is used for automatic PlugIn manual generation, do not rename.
% -- subdir math/probe --

The \emph{math/probe} plugins are designated for probe data analysis
and extraction or separation. They deal with all kind of probe and
event data attached to a scan.


A quick Overview of the ScanEvent interface: -- to be translated --

\begin{verbatim}
Also zum Einstieg, solltet Ihr Euch ein wenig mit dem Event-Handling
vertraut machen, mal scan_event.[hC] studieren -- die NetCDF load/save
routinen könnt Ihr einfach irgnorieren. Diese wird dann von mem2d.[hC]
verwendet, jedoch weniger wichtig, einzig was in mem2d.h von interesse
ist, ist die eine (und einizge) Liste (public in mem2d)

        GSList *scan_event_list;

die alle ScanEvents (Probe und User, etc...!!) enthält.


Also zum Überblick vielleicht gebe ich mal eine Kurzeinführung:

GSList *scan_event_list;  ist eine GSList die pointer von Type ScanEvent
enthält.

Class ScanEvent ist ein Abstrakter Event (jedes types), und ScanEvent
hält nicht mehr als die Koordinaten XYV + Event(s) (eine Art
Vierervektor, wenn man die Events selber noch mitnimmt und als t
sieht-:). (V == Value, optional und zur Zeit noch nicht verwendet, ist
jedoch nur logisch vorzusehen, wenn ich an Layered Scan denke (jeder
Layer N hat einen zugeordneten Value "V"), XY Koordinate ist in
absoluten Angstroems (incl Offset/Rotation!).

Also:

Der ScanEvent im Überblick, der Konstructor: (benötigt Ihr nicht)
class ScanEvent
ScanEvent (double xPos, double yPos, double Val=0.);

Wichtige Member Funktionen ggf. von Interesse:

        void add_event (EventEntry *ee); // Einen realen Daten-Event (mit Daten!) hinzufügen 
        double get_position (double &x, double &y); // Position abfragen (in kommt zurück in x,y, value als return wert)
        double distance (double *xy); // Abstand zu Punkt xy, ist array xy[]={X,Y, (V, ...)_Future}
        guint get_event_count() ; // Anzahl Events in Liste

Data:
        GSList *event_list; // Liste von Daten-Events "hier" bei XYV, 
                            // i.a. nur ein DatenEvent, type der Pointer ist "EventEntry".


Dann wäre da die Basis Class "EventEntry" (Ist Basis aller "Daten-Events)

class EventEntry
EventEntry (gchar *Name, time_t Time);

Ein EventEntry hat also einen Namen und eine Zeit (Zeit Koordinate,
time_t)

Wichtig: Ich habe als "Konevntion" Probe Events mit dem Namen "Probe"
versehen und User Events mit dem Namen "User", ist zum Identifikation.
Und Weiterhin sollen die Anfangsbuchstaben von Probe und User
eineindeutig sein, d.h. 'P' für Probe:

        gchar* description () { return name; }; // der volle Name
        gchar description_id () { return name[0]; }; // Identifikation via Initial (for speed reasons)


Dann gibt es den ProbeEntry  (etwas gestrippeder Code)  für alle Probe
artigen Daten:

class ProbeEntry : public EventEntry{
public:
        ProbeEntry (gchar *Name, time_t Time, GPtrArray *Labels, GPtrArray
*Unitssymbols, int Chunk_size); // Name, zur Zeit nur "Probe", time,
// dann ein Array von Pointern auf Labels und auf Unitssymbols, und Chunk_size.

// Chunk_size ist die Anzahl der aufgezeichneten Channels des Probe, aus
// Performance gründen speichere ich den gazne Probe-Datensatz von
// N-Punkten * J-Channels in einem linearen GArray ab mit folgender
// linearisierter Indizierung: (n*chunk_size+j) -- OK?


        virtual double get (int n, int j) // gibt den Probe Wert des N-ten
// Punktes, Channel j zurück -- die j-indizierung stimmt mit der "j"
// Indizierung von Labels und Unitssym überein. - OK?


        int get_num_sets () { return num_sets; }; // Anzahl Daten Punkte (N)
        int get_chunk_size () { return chunk_size; }; // Anzahl Channels (J)
        gchar *get_label (int j);
        gchar *get_unit_symbol (int j);
}


Analog gibt es dann noch

class UserEntry : public EventEntry{
public:
        UserEntry (gchar *Name, time_t Time, GPtrArray *Messages=NULL, int
num=0); // Name == "User" per default
...}


---

Wichtig ist, das man bevor man einen Event aus der EventListe als
ProbeEvent interpretiert den Type checked via der "ID" Funktion! Klar?

\end{verbatim}

That's it.


% --