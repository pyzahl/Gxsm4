/* Gnome gxsm - Gnome X Scanning Microscopy
 * universal STM/AFM/SARLS/SPALEED/... controlling and
 * data analysis software
 *
 * plugin_helper reports your answers as
author		=Percy Zahl
email	        	=zahl@users.sourceforge.net
pluginname		=ift2d
pluginmenuentry 	=IFT 2D
menupath		=math-filter2d-section
entryplace		=Filter _2D
shortentryplace	=F2D
abouttext		=inverse 2D FT
smallhelp		=inverse 2D FT
longhelp		=inverse 2D FT
 * 
 * Gxsm Plugin Name: ift2d.C
 * ========================================
 * 
 * Copyright (C) 1999 The Free Software Foundation
 *
 * Authors: Percy Zahl <zahl@fkp.uni-hannover.de>
 * additional features: Andreas Klust <klust@fkp.uni-hannover.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */


/* Please do not change the Begin/End lines of this comment section!
 * this is a LaTeX style section used for auto generation of the PlugIn Manual 
 * Chapter. Add a complete PlugIn documentation inbetween the Begin/End marks!
 * All "% PlugInXXX" commentary tags are mandatory
 * All "% OptPlugInXXX" tags are optional and can be removed or commented in
 * --------------------------------------------------------------------------------
% BeginPlugInDocuSection
% PlugInDocuCaption: inverse FT
% PlugInName: ift2d
% PlugInAuthor: Percy Zahl
% PlugInAuthorEmail: zahl@users.sourceforge.net
% PlugInMenuPath: Math/Filter 2D/IFT 2D

% PlugInDescription
Two dimensional inverse (backward) Fourier Transformation of a three layer (PSD, Re, Im) data set, as generated by the forward FT:

Layer 0 is the Power Spectral Density (not used here), layer 1 (Re) and 2 (Im) are the
Complex numbers used for the complex input for the IFT operation.

% PlugInUsage
Activate a channel containing a complex data set (3 layers: PSD, Re, Im).

%% OptPlugInSection: replace this by the section caption
%all following lines until next tag are going into this section
%...

%% OptPlugInSubSection: replace this line by the subsection caption
%all following lines until next tag are going into this subsection
%...

%% you can repeat OptPlugIn(Sub)Sections multiple times!

%% OptPlugInSources
%The active channel is used as data source.

%% OptPlugInObjects
%A optional rectangle is used for data extraction...

%% OptPlugInDest
%The computation result is placed into an existing math channel, else into a new created math channel.

%% OptPlugInConfig
%describe the configuration options of your plug in here!

%% OptPlugInFiles
%Does it uses, needs, creates any files? Put info here!

%% OptPlugInRefs
%Any references?

%% OptPlugInKnownBugs
%Are there known bugs? List! How to work around if not fixed?

%% OptPlugInNotes
This plugin is under construction.

%% OptPlugInHints
%Any tips and tricks?

% EndPlugInDocuSection
 * -------------------------------------------------------------------------------- 
 */

#include <gtk/gtk.h>
#include "config.h"
#include "plugin.h"

// Plugin Prototypes
static void ift2d_init( void );
static void ift2d_about( void );
static void ift2d_configure( void );
static void ift2d_cleanup( void );

// Define Type of math plugin here, only one line should be commented in!!
#define GXSM_ONE_SRC_PLUGIN__DEF
// #define GXSM_TWO_SRC_PLUGIN__DEF

// Math-Run-Function, use only one of (automatically done :=)
#ifdef GXSM_ONE_SRC_PLUGIN__DEF
// "OneSrc" Prototype
 static gboolean ift2d_run( Scan *Src, Scan *Dest );
#else
// "TwoSrc" Prototype
 static gboolean ift2d_run( Scan *Src1, Scan *Src2, Scan *Dest );
#endif

// Fill in the GxsmPlugin Description here
GxsmPlugin ift2d_pi = {
  NULL,                   // filled in and used by Gxsm, don't touch !
  NULL,                   // filled in and used by Gxsm, don't touch !
  0,                      // filled in and used by Gxsm, don't touch !
  NULL,                   // The Gxsm-App Class Ref.pointer (called "gapp" in Gxsm) is 
                          // filled in here by Gxsm on Plugin load, 
                          // just after init() is called !!!
  // ----------------------------------------------------------------------
  // Plugins Name, CodeStly is like: Name-M1S|M2S-BG|F1D|F2D|ST|TR|Misc
  "ift2d-"
#ifdef GXSM_ONE_SRC_PLUGIN__DEF
  "M1S"
#else
  "M2S"
#endif
  "-F2D",
  // Plugin's Category - used to autodecide on Pluginloading or ignoring
  // NULL: load, else
  // example: "+noHARD +STM +AFM"
  // load only, if "+noHARD: no hardware" and Instrument is STM or AFM
  // +/-xxxHARD und (+/-INST or ...)
  NULL,
  // Description, is shown by PluginViewer (Plugin: listplugin, Tools->Plugin Details)
  g_strdup("inverse 2D FT"),                   
  // Author(s)
  "Percy Zahl",
  // Menupath to position where it is appendet to
  "math-filter2d-section",
  // Menuentry
  N_("IFT 2D"),
  // help text shown on menu
  N_("inverse 2D FT"),
  // more info...
  "inverse 2D FT",
  NULL,          // error msg, plugin may put error status msg here later
  NULL,          // Plugin Status, managed by Gxsm, plugin may manipulate it too
  // init-function pointer, can be "NULL", 
  // called if present at plugin load
  ift2d_init,  
  // query-function pointer, can be "NULL", 
  // called if present after plugin init to let plugin manage it install itself
  NULL, // query should be "NULL" for Gxsm-Math-Plugin !!!
  // about-function, can be "NULL"
  // can be called by "Plugin Details"
  ift2d_about,
  // configure-function, can be "NULL"
  // can be called by "Plugin Details"
  ift2d_configure,
  // run-function, can be "NULL", if non-Zero and no query defined, 
  // it is called on menupath->"plugin"
  NULL, // run should be "NULL" for Gxsm-Math-Plugin !!!
  // cleanup-function, can be "NULL"
  // called if present at plugin removal
  NULL, // direct menu entry callback1 or NULL
  NULL, // direct menu entry callback2 or NULL

  ift2d_cleanup
};

// special math Plugin-Strucure, use
// GxsmMathOneSrcPlugin ift2d_m1s_pi -> "OneSrcMath"
// GxsmMathTwoSrcPlugin ift2d_m2s_pi -> "TwoSrcMath"
#ifdef GXSM_ONE_SRC_PLUGIN__DEF
 GxsmMathOneSrcPlugin ift2d_m1s_pi
#else
 GxsmMathTwoSrcPlugin ift2d_m2s_pi
#endif
 = {
   // math-function to run, see prototype(s) above!!
   ift2d_run
 };

// Text used in Aboutbox, please update!!
static const char *about_text = N_("Gxsm ift2d Plugin\n\n"
                                   "inverse 2D FT");

// Symbol "get_gxsm_plugin_info" is resolved by dlsym from Gxsm, used to get Plugin's info!! 
// Essential Plugin Function!!
GxsmPlugin *get_gxsm_plugin_info ( void ){ 
  ift2d_pi.description = g_strdup_printf(N_("Gxsm MathOneArg ift2d plugin %s"), VERSION);
  return &ift2d_pi; 
}

// Symbol "get_gxsm_math_one|two_src_plugin_info" is resolved by dlsym from Gxsm, 
// used to find out which Math Type the Plugin is!! 
// Essential Plugin Function!!
#ifdef GXSM_ONE_SRC_PLUGIN__DEF
GxsmMathOneSrcPlugin *get_gxsm_math_one_src_plugin_info( void ) {
  return &ift2d_m1s_pi; 
}
#else
GxsmMathTwoSrcPlugin *get_gxsm_math_two_src_plugin_info( void ) { 
  return &ift2d_m2s_pi; 
}
#endif

/* Here we go... */
// init-Function
static void ift2d_init(void)
{
  PI_DEBUG (DBG_L2, "Plugin Init" );
}

// about-Function
static void ift2d_about(void)
{
  const gchar *authors[] = { ift2d_pi.authors, NULL};
  gtk_show_about_dialog (NULL, 
			 "program-name",  ift2d_pi.name,
			 "version", VERSION,
			 "license", GTK_LICENSE_GPL_3_0,
			 "comments", about_text,
			 "authors", authors,
			 NULL
			 );
}

// configure-Function
static void ift2d_configure(void)
{
  if(ift2d_pi.app)
    ift2d_pi.app->message("ift2d Plugin Configuration");
}

// cleanup-Function
static void ift2d_cleanup(void)
{
  PI_DEBUG (DBG_L2, "Plugin Cleanup");
}

// run-Function
static gboolean ift2d_run(Scan *Src, Scan *Dest)
{
	XSM_DEBUG (DBG_L3, "IFT 2D");
	ZData  *SrcZ;

	if (Src->mem2d->GetNv () != 3) {
		return MATH_SIZEERR;
	}

	SrcZ  =  Src->mem2d->data;
	Dest->mem2d->Resize (Src->mem2d->GetNx (), Src->mem2d->GetNy (), 1, ZD_DOUBLE);
	// set "Complex" layer param defaults
	Dest->data.s.nvalues=1;
	Dest->data.s.ntimes=1;
	Dest->mem2d->data->SetVLookup (0, 0);

	Dest->data.s.x0 = 0.;
	Dest->data.s.y0 = 0.;
	Dest->data.s.dx = Src->data.s.dx;
	Dest->data.s.dy = Src->data.s.dy;
	Dest->data.s.rx = Src->data.s.rx;
	Dest->data.s.ry = Src->data.s.ry;

	Dest->mem2d->data->MkXLookup (-Src->data.s.rx/2, Src->data.s.rx/2);
	Dest->mem2d->data->MkYLookup (-Src->data.s.ry/2, Src->data.s.ry/2);

	XSM_DEBUG (DBG_L3, "F2D FFT: using libfftw");

	// allocate memory for real and inplace complex data, add padding if nx is even
	int xlen  = Src->mem2d->GetNx ()/2+1;
	int xlen2 = 2*xlen;
	fftw_complex *dat =  (fftw_complex*) fftw_malloc (sizeof(fftw_complex) * xlen * Src->mem2d->GetNy ());
	double *out = (double *) dat;

	if (dat == NULL) {
		XSM_DEBUG (DBG_L3, "F2D FFT: libfftw: Error allocating memory for complex data");
		return MATH_NOMEM;
	}

	memset(out, 0, sizeof(out));

	// create plan for in-place transform
	fftw_plan plan    = fftw_plan_dft_c2r_2d (Src->mem2d->GetNy (), Src->mem2d->GetNx (), 
						  dat, out, FFTW_ESTIMATE);

	if (plan == NULL) {
		XSM_DEBUG (DBG_L3, "F2D FFT: libfftw: Error creating plan");
		return MATH_LIB_ERR;
	}

	// convert image data to fftw_complex
	for (int line=0; line < Dest->mem2d->GetNy(); line++)
		for (int col=0; col < xlen; col++){
			int i = line*xlen + col;	
			int m = QSWP(col, Src->mem2d->GetNx());
			int n = QSWP(line, Src->mem2d->GetNy());
			c_re(dat[i]) = Src->mem2d->GetDataPkt(m,n,1);
			c_im(dat[i]) = Src->mem2d->GetDataPkt(m,n,2);
		}

	// compute 2D transform using in-place fourier transform
	fftw_execute (plan);

	// convert complex data to image
	// and flip image that spatial freq. (0,0) is in the middle
	// (quadrant swap using the QSWP macro defined in xsmmath.h)
  
	XSM_DEBUG (DBG_L3, "F2D FFT done, converting data to ABS/RE/IM");

	for (int line=0; line < Src->mem2d->GetNy(); line++) {
		for (int i,col=0; col < Src->mem2d->GetNx(); col++) {
			i=line*xlen2 + col;
			Dest->mem2d->PutDataPkt(out[i], col, line);
		}
	}
  
	// destroy plan
	fftw_destroy_plan(plan); 

	// free real/complex data memory
	fftw_free (dat);

	return MATH_OK;
}


